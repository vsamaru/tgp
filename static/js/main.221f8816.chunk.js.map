{"version":3,"sources":["actions/types.js","actions/postActions.js","components/PostEditor/PostEditor.js","components/Post/Post.js","components/Posts/Posts.js","components/Navigation/Navigation.js","reducers/postReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["ADD_POST","EDIT_POST","DELETE_POST","editPost","post","dispatch","type","payload","PostEditor","Component","constructor","props","super","this","state","title","body","id","editing","handleInputChange","bind","handleAutoExpansion","handleSubmit","e","target","value","name","setState","handler","uuid","addPost","field","style","height","computed","window","getComputedStyle","parseInt","getPropertyValue","scrollHeight","componentDidMount","document","getElementById","addEventListener","event","tagName","toLowerCase","render","Form","className","Group","Control","placeholder","onChange","Button","variant","disabled","onClick","as","rows","connect","posts","byId","Display","Post","edit","handleEdit","handleDelete","handleConfirm","deletePost","Card","Body","Posts","getPosts","length","map","Navigation","Navbar","bg","expand","Brand","to","Nav","Item","path","exact","component","initialState","combineReducers","action","filter","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","__REDUX_DEVTOOLS_EXTENSION__","App","Boolean","location","hostname","match","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.221f8816.chunk.js","sourcesContent":["export const ADD_POST = \"ADD_POST\";\nexport const EDIT_POST = \"EDIT_POST\";\nexport const DELETE_POST = \"DELETE_POST\";\n","import { ADD_POST, EDIT_POST, DELETE_POST } from \"./types\";\n\nexport const addPost = post => dispatch => {\n  dispatch({\n    type: ADD_POST,\n    payload: post\n  });\n};\n\nexport const editPost = post => dispatch => {\n  dispatch({\n    type: EDIT_POST,\n    payload: post\n  });\n};\n\nexport const deletePost = id => dispatch => {\n  dispatch({\n    type: DELETE_POST,\n    payload: id\n  });\n};\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button, Form } from \"react-bootstrap\";\nimport { addPost, editPost } from \"../../actions/postActions\";\nimport { v4 as uuid } from 'uuid'\n\nimport \"./PostEditor.css\";\n\nclass PostEditor extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      title: \"\",\n      body: \"\",\n      id: \"\",\n      editing: props.editing || false\n    };\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleAutoExpansion = this.handleAutoExpansion.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  // Directs any input in the forms into the state\n  handleInputChange(e) {\n    const target = e.target;\n    const value = target.value;\n    const name = target.name;\n\n    this.setState({\n      [name]: value\n    });\n  }\n\n  handleSubmit() {\n    const { title, body, id } = this.state;\n    if (this.state.editing) {\n      this.props.handler({ title, body, id });\n    } else {\n      const post = { title, body, id: uuid() };\n\n      this.props.addPost(post);\n      this.setState({ title: \"\", body: \"\" });\n    }\n  }\n\n  // Automatically vertically expands textarea form\n  handleAutoExpansion(field) {\n    field.style.height = \"inherit\";\n    const computed = window.getComputedStyle(field);\n\n    const height =\n      parseInt(computed.getPropertyValue(\"border-top-width\"), 10) +\n      parseInt(computed.getPropertyValue(\"padding-top\"), 10) +\n      field.scrollHeight +\n      parseInt(computed.getPropertyValue(\"padding-bottom\"), 10) +\n      parseInt(computed.getPropertyValue(\"border-bottom-width\"), 10);\n\n    field.style.height = height + \"px\";\n  }\n\n  // Expand the form on mount, add listener for textarea input\n  componentDidMount() {\n    if (this.state.editing) {\n      this.setState(\n        {\n          title: this.props.post.title,\n          body: this.props.post.body,\n          id: this.props.post.id\n        },\n        () => {\n          this.handleAutoExpansion(document.getElementById(\"text\"));\n        }\n      );\n    }\n\n    document.addEventListener(\n      \"input\",\n      event => {\n        if (event.target.tagName.toLowerCase() !== \"textarea\") return;\n        this.handleAutoExpansion(event.target);\n      },\n      false\n    );\n  }\n\n  render() {\n    const { title, body } = this.state;\n\n    return (\n      <Form className=\"container\">\n        <Form.Group className=\"inline-title-submit\">\n          <Form.Control\n            placeholder=\"title\"\n            id=\"title\"\n            name=\"title\"\n            value={title}\n            onChange={this.handleInputChange}\n          />\n          <Button\n            variant=\"outline-dark\"\n            id=\"submit\"\n            disabled={this.state.title === \"\" || this.state.body === \"\"}\n            onClick={this.handleSubmit}\n          >\n            Submit\n          </Button>\n        </Form.Group>\n        <Form.Group>\n          <Form.Control\n            as=\"textarea\"\n            id=\"text\"\n            name=\"body\"\n            rows=\"1\"\n            placeholder=\"Text\"\n            value={body}\n            onChange={this.handleInputChange}\n          />\n        </Form.Group>\n      </Form>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    posts: state.posts.byId\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  {\n    addPost,\n    editPost\n  }\n)(PostEditor);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Card, Button } from \"react-bootstrap\";\n\nimport PostEditor from \"../PostEditor/PostEditor\";\n\nimport \"./Post.css\";\n\nimport { deletePost, editPost } from \"../../actions/postActions\";\n\nconst Display = props => {\n  return (\n    <div>\n      <h3>{props.post.title}</h3>\n      <p>{props.post.body}</p>\n    </div>\n  );\n};\n\nclass Post extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      edit: false\n    };\n\n    this.handleEdit = this.handleEdit.bind(this);\n    this.handleDelete = this.handleDelete.bind(this);\n    this.handleConfirm = this.handleConfirm.bind(this);\n  }\n\n  handleEdit() {\n    this.setState({ edit: true });\n  }\n\n  handleConfirm(post) {\n    this.props.editPost(post);\n    this.setState({ edit: false });\n  }\n\n  handleDelete(id) {\n    this.props.deletePost(id);\n  }\n\n  render() {\n    const { post } = this.props;\n    return (\n      <Card>\n        <Card.Body>\n          {!this.state.edit ? (\n            <div>\n              <Display post={post} />\n              <div className=\"pull-right\">\n                <Button variant=\"btn-primary\" onClick={this.handleEdit}>\n                  <i className=\"fas fa-pen\" />\n                </Button>\n                <Button\n                  variant=\"btn-danger\"\n                  onClick={() => this.handleDelete(post.id)}\n                >\n                  <i className=\"far fa-trash-alt\" />\n                </Button>\n              </div>\n            </div>\n          ) : (\n            <PostEditor\n              post={post}\n              handler={this.handleConfirm}\n              editing={true}\n            />\n          )}\n        </Card.Body>\n      </Card>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    posts: state.posts.byId\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  { deletePost, editPost }\n)(Post);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Post from \"../Post/Post\";\n\nimport \"./Posts.css\";\n\nexport class Posts extends Component {\n  render() {\n    const getPosts =\n      this.props.posts.length !== 0 ? (\n        this.props.posts.map(post => <Post post={post} key={post.id} />)\n      ) : (\n        <h1>No posts here yet.</h1>\n      );\n\n    return <div className=\"container posts\">{getPosts}</div>;\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    posts: state.posts.byId\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  null\n)(Posts);\n","import React, { Component } from \"react\";\nimport { Navbar, Nav } from \"react-bootstrap\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport \"./Navigation.css\";\n\nimport Posts from \"../Posts/Posts\";\nimport PostEditor from \"../PostEditor/PostEditor\";\n\nexport class Navigation extends Component {\n  render() {\n    return (\n      <Router>\n        <div id=\"navigation\">\n          <Navbar bg=\"light\" expand=\"lg\">\n            <Navbar.Brand>\n              <Link to=\"/\">Telegraph</Link>\n            </Navbar.Brand>\n            <Nav className=\"mr-auto\">\n              <Nav.Item>\n                <Link to=\"/posts/\">Posts</Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Link to=\"/\">Add Post</Link>\n              </Nav.Item>\n            </Nav>\n          </Navbar>\n          <Route path=\"/\" exact component={PostEditor} />\n          <Route path=\"/posts/\" component={Posts} />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default Navigation;\n","import { ADD_POST, EDIT_POST, DELETE_POST } from \"../actions/types\";\n\nconst initialState = {\n  byId: []\n};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case ADD_POST:\n      return {\n        ...state,\n        byId: [action.payload, ...state.byId]\n      };\n    case DELETE_POST:\n      return {\n        ...state,\n        byId: state.byId.filter(post => {\n          return post.id !== action.payload;\n        })\n      };\n    case EDIT_POST:\n      return {\n        ...state,\n        byId: state.byId.map(post => {\n          return post.id === action.payload.id ? action.payload : post;\n        })\n      };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport postReducer from \"./postReducer\";\n\nexport default combineReducers({\n  posts: postReducer\n});\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers\";\n\nconst initialState = {};\nconst middleware = [thunk];\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  compose(\n    applyMiddleware(...middleware),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  )\n);\n\nexport default store;\n","import React, { Component } from \"react\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./App.css\";\n\nimport Navigation from \"./components/Navigation/Navigation\";\n\nimport store from \"./store\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <BrowserRouter>\n          <div className=\"App\">\n            <Navigation />\n          </div>\n        </BrowserRouter>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}